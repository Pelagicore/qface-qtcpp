{%+ macro enum_decl(enum) %}
    enum {{enum}} {
    {% for member in enum.members %}
        {{member.name}} = {{member.value}}{% if not loop.last %},{%endif%}

    {% endfor %}
    };
    Q_ENUM({{enum}})
{%- endmacro %}

{% macro property(property) -%}
Q_PROPERTY({{property|returnType}} {{property}} READ {{property}} {% if not property.readonly %}WRITE set{{property|upperfirst}} {% endif %}{% if not property.const %}NOTIFY {{property}}Changed{% endif %})
{%- endmacro %}

{% macro property_setter_decl(property) -%}
virtual void set{{property|upperfirst}}({{ property|parameterType }});
{%- endmacro %}

{% macro property_getter_decl(property) -%}
virtual {{property|returnType}} {{property}}() const;
{%- endmacro %}

{% macro signal_decl(symbol) -%}
{% if symbol.is_property %}
void {{symbol}}Changed({{symbol|parameters}});
{% else %}
void {{symbol}}({{symbol|parameters}});
{%- endif %}

{%- endmacro %}
{% macro property_member_decl(property) %}
{{property|returnType}} m_{{property}};
{%- endmacro %}

{% macro property_setter_impl(class, property) -%}
/*!
   \qmlproperty {{property.type}} {{interface}}::{{property}}
{% with doc = property.comment|parse_doc %}
   \brief {{doc.brief}}

   {{doc.description}}
{% endwith %}
*/

void {{class}}::set{{property|upperfirst}}({{ property|parameterType }})
{
    if(m_{{property}} == {{property}}) {
        return;
    }
    m_{{property}} = {{property}};
    emit {{property}}Changed();
}
{%- endmacro %}


{% macro property_getter_impl(class, property) -%}
{{property|returnType}} {{class}}::{{property}}() const
{
    return m_{{property}};
}
{%- endmacro %}


{% macro operation_impl(class, operation) %}
/*!
   \qmlmethod {{operation.type}} {{class}}::{{operation}}({{operation|parameters}})
{% with doc = operation.comment|parse_doc %}
   \brief {{doc.brief}}
   {{doc.description}}
{% endwith %}
*/
{{operation|returnType}} {{class}}::{{operation}}({{operation|parameters}})
{
    {% for parameter in operation.parameters %}
    Q_UNUSED({{parameter.name}});
    {% endfor %}
    qWarning() << "{{class}}::{{operation}}(...) not implemented";
    return {{operation|defaultValue}};
}
{% endmacro %}

{% macro operation_decl(operation) %}
    virtual {{operation|returnType}} {{operation}}({{operation|parameters}});
{% endmacro %}

{% macro autogenerated(prefix="//") %}

{{prefix}} This is an auto-generated file.
{{prefix}} Do not edit! All changes made to it will be lost.

{% endmacro %}

{% macro preserved(prefix="//") %}

{{prefix}} This is a preserved file.
{{prefix}} Changes will not be overriden by the generator.
{{prefix}} To reset the file you need to delete it first.

{% endmacro %}

